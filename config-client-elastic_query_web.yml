server:
  port: 8184
  servlet:
    context-path: /elastic-query-web-client

elastic-query-web-client:
  webclient:
    connect-timeout-ms: 10000  # Tempo limite de conexão
    read-timeout-ms: 10000     # Tempo limite de leitura
    write-timeout-ms: 10000    # Tempo limite de escrita
    max-in-memory-size: 10485760 # 10MB  Tamanho máximo de memória que o cliente pode utilizar
    content-type: 'application/vnd.api.v1+json'  # Conteúdo padrão
    accept-type: 'application/vnd.api.v1+json'   # Versionamento
    base-url: 'http://elastic-query-service/elastic-query-service/documents'
    service-id: elastic-query-service
    # Lista de ids, host e port para o loadBalancer, veja classe ElasticQueryServiceInstanceListSupplierConfig
    instances:
      -
        id: elastic-query-service-1
        host: localhost
        port: 8183
      -
        id: elastic-query-service-2
        host: localhost
        port: 8186
  query-by-text:
    method: POST
    uri: "/get-document-by-text"
    accept: ${elastic-query-web-client.webclient.accept-type}

spring:
  thymeleaf:
    # Definido como false para permitir que os modelos thymeleaf sejam carregados quando
    # eles são alterados durante o desenvolvimento
    cache: false
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: 'elastic-query-web-client'
            # Pegar a secret no console admin do keycloak e transformar no Postman request "Encrypt Password"
            client-secret: '{cipher}d8ccf1ceac5c4f9d48255b071aff2934d46a5c427b17a42333ffbafeb99e99c56603b9731c5f1eff78e441bae07480b5ce6a2e4ab7dc71b3f47692ea6d318f9c'
            authorization-grant-type: authorization_code
            # Pegar no console admin do keycloak "Clients", "Settings", "Valid redirect URIs" login/oauth2/code
            # baseUrl -> vem de elastic-query-web-client.webclient.base-url definido acima
            # registrationId -> vem de security.default-client-registration-id definido abaixo
            redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'
#            redirect-uri: 'http://loclahost:8184/elastic-query-web-client/login/oauth2/code/keycloak'
            scope: openid
        provider:
          # https://www.baeldung.com/spring-boot-keycloak
          keycloak:
            # As uris abaixo devem ser visualizadas no Postman rodando "OpenID Endpoint Configuration" ou
            # pelo console admin do keycloak para o realm criado em "Realm settings", "Endpoints": "OpenID Endpoint Configuration"
            issuerUri: http://localhost:9091/auth/realms/microservices-realm
#            issuer-uri: http://keycloak-authorization-server:9091/realms/microservices-realm
#            issuerUri: http://localhost:8081/auth/realms/microservices-realm
#            user-name-attribute: preferred_username

security:
  # Pegar no console admin do keycloak "Clients", "Settings", "Home URL"
  logout-success-url: http://localhost:8184/elastic-query-web-client
  default-client-registration-id: keycloak


# Estas propriedades serão lidas pela classe WebSecurityConfig no módulo: elastic-query-service
user-config:
  username: test
#  password: '{cipher}baeb90d57edb9a050b97b98a7d8cabe80ee884e6fff16c22956172459a43e54d'
  password: '{cipher}78620071212faa6fbc1331721ce51e9afd65baf413eaf4cb8c3560831e1f1118'
  roles: USER